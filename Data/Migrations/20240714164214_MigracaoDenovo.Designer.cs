// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20240714164214_MigracaoDenovo")]
    partial class MigracaoDenovo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CriptoBank.Domain.Models.ContaCorrente", b =>
                {
                    b.Property<int>("ContaCorrenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContaCorrenteID"));

                    b.Property<int>("PessoaID")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ContaCorrenteID");

                    b.HasIndex("PessoaID");

                    b.ToTable("ContaCorrente");
                });

            modelBuilder.Entity("Domain.Models.Cartao", b =>
                {
                    b.Property<int>("CartaoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartaoID"));

                    b.Property<int?>("ContaCorrenteID")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CartaoID");

                    b.HasIndex("ContaCorrenteID");

                    b.ToTable("Cartao");
                });

            modelBuilder.Entity("Domain.Models.Deposito", b =>
                {
                    b.Property<int>("DepositoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositoID"));

                    b.Property<int>("ContaCorrenteID")
                        .HasColumnType("int");

                    b.Property<int>("TransacaoCriptoID")
                        .HasColumnType("int");

                    b.Property<int>("TransacaoID")
                        .HasColumnType("int");

                    b.HasKey("DepositoID");

                    b.HasIndex("ContaCorrenteID");

                    b.HasIndex("TransacaoCriptoID");

                    b.ToTable("Deposito");
                });

            modelBuilder.Entity("Domain.Models.Emprestimo", b =>
                {
                    b.Property<int>("EmprestimoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmprestimoID"));

                    b.Property<int>("ContaCorrenteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataLiberacao")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PercentualJurosAtraso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentualJurosMensal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantidadeParcelas")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorContratado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmprestimoID");

                    b.HasIndex("ContaCorrenteID");

                    b.ToTable("Emprestimo");
                });

            modelBuilder.Entity("Domain.Models.Parcela", b =>
                {
                    b.Property<int>("ParcelaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelaID"));

                    b.Property<int>("EmprestimoID")
                        .HasColumnType("int");

                    b.Property<byte>("StatusID")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ParcelaID");

                    b.HasIndex("EmprestimoID");

                    b.ToTable("Parcela");
                });

            modelBuilder.Entity("Domain.Models.Pessoa", b =>
                {
                    b.Property<int>("PessoaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PessoaID"));

                    b.Property<string>("CPFCNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PessoaID");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Domain.Models.TransacaoCripto", b =>
                {
                    b.Property<int>("TransacaoCriptoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransacaoCriptoID"));

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValorCripto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorReal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TransacaoCriptoID");

                    b.ToTable("TransacaoCripto");
                });

            modelBuilder.Entity("Domain.Models.Transferencia", b =>
                {
                    b.Property<int>("TransferenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferenciaID"));

                    b.Property<int>("ContaCorrenteDestinoID")
                        .HasColumnType("int");

                    b.Property<int>("ContaCorrenteID")
                        .HasColumnType("int");

                    b.Property<int>("TransacaoCriptoID")
                        .HasColumnType("int");

                    b.Property<int>("TransacaoID")
                        .HasColumnType("int");

                    b.HasKey("TransferenciaID");

                    b.HasIndex("ContaCorrenteID");

                    b.HasIndex("TransacaoCriptoID");

                    b.ToTable("Transferencia");
                });

            modelBuilder.Entity("CriptoBank.Domain.Models.ContaCorrente", b =>
                {
                    b.HasOne("Domain.Models.Pessoa", null)
                        .WithMany("ContaCorrente")
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Cartao", b =>
                {
                    b.HasOne("CriptoBank.Domain.Models.ContaCorrente", null)
                        .WithMany("Cartoes")
                        .HasForeignKey("ContaCorrenteID");
                });

            modelBuilder.Entity("Domain.Models.Deposito", b =>
                {
                    b.HasOne("CriptoBank.Domain.Models.ContaCorrente", null)
                        .WithMany("Depositos")
                        .HasForeignKey("ContaCorrenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TransacaoCripto", "TransacaoCripto")
                        .WithMany()
                        .HasForeignKey("TransacaoCriptoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransacaoCripto");
                });

            modelBuilder.Entity("Domain.Models.Emprestimo", b =>
                {
                    b.HasOne("CriptoBank.Domain.Models.ContaCorrente", null)
                        .WithMany("Emprestimos")
                        .HasForeignKey("ContaCorrenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Parcela", b =>
                {
                    b.HasOne("Domain.Models.Emprestimo", null)
                        .WithMany("Parcelas")
                        .HasForeignKey("EmprestimoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Transferencia", b =>
                {
                    b.HasOne("CriptoBank.Domain.Models.ContaCorrente", null)
                        .WithMany("Transferencias")
                        .HasForeignKey("ContaCorrenteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TransacaoCripto", "TransacaoCripto")
                        .WithMany()
                        .HasForeignKey("TransacaoCriptoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransacaoCripto");
                });

            modelBuilder.Entity("CriptoBank.Domain.Models.ContaCorrente", b =>
                {
                    b.Navigation("Cartoes");

                    b.Navigation("Depositos");

                    b.Navigation("Emprestimos");

                    b.Navigation("Transferencias");
                });

            modelBuilder.Entity("Domain.Models.Emprestimo", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("Domain.Models.Pessoa", b =>
                {
                    b.Navigation("ContaCorrente");
                });
#pragma warning restore 612, 618
        }
    }
}
